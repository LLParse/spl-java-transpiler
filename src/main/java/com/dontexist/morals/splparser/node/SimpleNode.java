/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package com.dontexist.morals.splparser.node;

import com.dontexist.morals.splparser.SPLParser;
import com.dontexist.morals.splparser.Token;

public class SimpleNode implements Node {

   protected Node      parent;
   protected Node[]    children;
   protected int       id;
   protected Object    value;
   protected SPLParser parser;
   protected Token     first, last;

   public SimpleNode(int i) {
      id = i;
   }

   public SimpleNode(SPLParser p, int i) {
      this(i);
      parser = p;
   }

   public void jjtOpen() {
      //first = parser.getToken(0);
   }

   public void jjtClose() {
      //last = parser.getToken(0);
   }

   public void setFirstToken(Token first) {
      this.first = first;
   }

   public Token jjtGetFirst() {
      return first;
   }

   public Token jjtGetLast() {
      return last;
   }

   public void jjtSetParent(Node n) {
      parent = n;
   }

   public Node jjtGetParent() {
      return parent;
   }

   public void jjtAddChild(Node n, int i) {
      if (children == null) {
         children = new Node[i + 1];
      }
      else if (i >= children.length) {
         Node c[] = new Node[i + 1];
         System.arraycopy(children, 0, c, 0, children.length);
         children = c;
      }
      children[i] = n;
   }

   public Node jjtGetChild(int i) {
      return children[i];
   }

   public int jjtGetNumChildren() {
      return (children == null) ? 0 : children.length;
   }

   public void jjtSetValue(Object value) {
      this.value = value;
   }

   public Object jjtGetValue() {
      return value;
   }

   /** Accept the visitor. **/
   public Object jjtAccept(SPLParserVisitor visitor, Object data) {
      return visitor.visit(this, data);
   }

   /** Accept the visitor. **/
   public Object childrenAccept(SPLParserVisitor visitor, Object data) {
      if (children != null) {
         for (int i = 0; i < children.length; ++i) {
            data = children[i].jjtAccept(visitor, data);
         }
      }
      return data;
   }

   /* You can override these two methods in subclasses of SimpleNode to
      customize the way the node appears when the tree is dumped.  If
      your output uses more than one line you should override
      toString(String), otherwise overriding toString() is probably all
      you need to do. */

   public String toString() {
      return SPLParserTreeConstants.jjtNodeName[id];
   }

   public String toString(String prefix) {
      return prefix + toString();
   }

   /* Override this method if you want to customize how the node dumps
      out its children. */

   public void dump(String prefix) {
      System.out.println(toString(prefix));
      if (children != null) {
         for (int i = 0; i < children.length; ++i) {
            SimpleNode n = (SimpleNode) children[i];
            if (n != null) {
               n.dump(prefix + " ");
            }
         }
      }
   }

   // Token tracking methods
   protected Token begin, end;
   public void jjtSetFirstToken(Token t) { begin = t; }
   public void jjtSetLastToken(Token t) { end = t; }
   public Token jjtGetFirstToken() { return begin; }
   public Token jjtGetLastToken() { return end; }
   
}


/* JavaCC - OriginalChecksum=b1492fdc461dff9032d4f435aabfa366 (do not edit this line) */
