/* Generated By:JJTree&JavaCC: Do not edit this line. SPLParser.java */
package com.xerxes500.transpiler.splparser;
import com.xerxes500.transpiler.splparser.node.*;


public class SPLParser/*@bgen(jjtree)*/implements SPLParserTreeConstants, SPLParserConstants {/*@bgen(jjtree)*/
  protected static JJTSPLParserState jjtree = new JJTSPLParserState();

  static final public ASTCompilationUnit CompilationUnit() throws ParseException {
 /*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      DeclarationList();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void DeclarationList() throws ParseException {
    label_1:
    while (true) {
      Declaration();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
      case GRANT:
      case REVOKE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void Declaration() throws ParseException {
 /*@bgen(jjtree) Declaration */
  ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
        ProcedureDeclaration();
        break;
      case GRANT:
        GrantDeclaration();
        break;
      case REVOKE:
        RevokeDeclaration();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GO:
        case 146:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 146:
          jj_consume_token(146);
          break;
        case GO:
          jj_consume_token(GO);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/* Ignore these because we don't care */
  static final public void GrantDeclaration() throws ParseException {
    jj_consume_token(GRANT);
    jj_consume_token(EXECUTE);
    jj_consume_token(ON);
    jj_consume_token(PROCEDURE);
    if (jj_2_1(2)) {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(147);
    } else {
      ;
    }
    jj_consume_token(IDENTIFIER);
    jj_consume_token(TO);
    jj_consume_token(IDENTIFIER);
  }

  static final public void RevokeDeclaration() throws ParseException {
 /*@bgen(jjtree) RevokeDeclaration */
  ASTRevokeDeclaration jjtn000 = new ASTRevokeDeclaration(JJTREVOKEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(REVOKE);
      jj_consume_token(EXECUTE);
      jj_consume_token(ON);
      jj_consume_token(PROCEDURE);
      if (jj_2_2(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(147);
      } else {
        ;
      }
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 147:
        jj_consume_token(147);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          break;
        case STRING_LITERAL:
          jj_consume_token(STRING_LITERAL);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(148);
      if (jj_2_3(2)) {
        PrimitiveTypeList();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DATE:
        case YEAR:
        case DAY:
        case MONTH:
        case DISTINCT:
        case DESC:
        case IDENTIFIER:
        case 151:
          ArgumentList();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(149);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURNING:
      case RETURNS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURNING:
          jj_consume_token(RETURNING);
          break;
        case RETURNS:
          jj_consume_token(RETURNS);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PrimitiveTypeList();
        jj_consume_token(146);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(FROM);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(AS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case STRING_LITERAL:
        jj_consume_token(STRING_LITERAL);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ProcedureDeclaration() throws ParseException {
 /*@bgen(jjtree) ProcedureDeclaration */
        ASTProcedureDeclaration jjtn000 = new ASTProcedureDeclaration(JJTPROCEDUREDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token name;
    try {
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DBA:
        jj_consume_token(DBA);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(PROCEDURE);
      if (jj_2_4(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING_LITERAL:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jj_consume_token(IDENTIFIER);
            break;
          case STRING_LITERAL:
            jj_consume_token(STRING_LITERAL);
            break;
          default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        jj_consume_token(147);
      } else {
        ;
      }
      name = jj_consume_token(IDENTIFIER);
      jj_consume_token(148);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case IDENTIFIER:
      case 151:
        ArgumentList();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(149);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURNING:
      case RETURNS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RETURNING:
          jj_consume_token(RETURNING);
          break;
        case RETURNS:
          jj_consume_token(RETURNS);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PrimitiveTypeList();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      if (jj_2_5(2)) {
        jj_consume_token(146);
      } else {
        ;
      }
      CompoundStatement();
      ProcedureConclusion();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(name.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ProcedureConclusion() throws ParseException {
 /*@bgen(jjtree) ProcedureConclusion */
  ASTProcedureConclusion jjtn000 = new ASTProcedureConclusion(JJTPROCEDURECONCLUSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(END);
      jj_consume_token(PROCEDURE);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ArgumentList() throws ParseException {
 /*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Argument();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_3;
        }
        jj_consume_token(150);
        Argument();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Argument() throws ParseException {
 /*@bgen(jjtree) Argument */
  ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      PrimitiveType();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void PrimitiveTypeList() throws ParseException {
 /*@bgen(jjtree) PrimitiveTypeList */
  ASTPrimitiveTypeList jjtn000 = new ASTPrimitiveTypeList(JJTPRIMITIVETYPELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      PrimitiveType();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_4;
        }
        jj_consume_token(150);
        PrimitiveType();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
                Token t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        jj_consume_token(147);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHAR:
        t = jj_consume_token(CHAR);
        break;
      case CHARACTER_VARYING:
        t = jj_consume_token(CHARACTER_VARYING);
        break;
      case LVARCHAR:
        t = jj_consume_token(LVARCHAR);
        break;
      case NCHAR:
        t = jj_consume_token(NCHAR);
        break;
      case NVARCHAR:
        t = jj_consume_token(NVARCHAR);
        break;
      case VARCHAR:
        t = jj_consume_token(VARCHAR);
        break;
      case DECIMAL:
        t = jj_consume_token(DECIMAL);
        break;
      case FLOAT:
        t = jj_consume_token(FLOAT);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      case INT8:
        t = jj_consume_token(INT8);
        break;
      case INTEGER:
        t = jj_consume_token(INTEGER);
        break;
      case MONEY:
        t = jj_consume_token(MONEY);
        break;
      case SERIAL:
        t = jj_consume_token(SERIAL);
        break;
      case SERIAL8:
        t = jj_consume_token(SERIAL8);
        break;
      case SMALLFLOAT:
        t = jj_consume_token(SMALLFLOAT);
        break;
      case SMALLINT:
        t = jj_consume_token(SMALLINT);
        break;
      case BYTE:
        t = jj_consume_token(BYTE);
        break;
      case TEXT:
        t = jj_consume_token(TEXT);
        break;
      case BLOB:
        t = jj_consume_token(BLOB);
        break;
      case CLOB:
        t = jj_consume_token(CLOB);
        break;
      case DATE:
        t = jj_consume_token(DATE);
        break;
      case DATETIME:
        t = jj_consume_token(DATETIME);
        break;
      case INTERVAL:
        t = jj_consume_token(INTERVAL);
        break;
      case BOOLEAN:
        t = jj_consume_token(BOOLEAN);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_6(2)) {
        primitiveTypeParams();
      } else {
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setType(t.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/* We ignore all data type parameters */
  static final public void primitiveTypeParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 148:
      jj_consume_token(148);
      jj_consume_token(INTEGER_LITERAL);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_5;
        }
        jj_consume_token(150);
        jj_consume_token(INTEGER_LITERAL);
      }
      jj_consume_token(149);
      break;
    case FRACTION:
    case SECOND:
    case YEAR:
    case DAY:
    case HOUR:
    case MONTH:
      intervalParams();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void intervalParams() throws ParseException {
 /*@bgen(jjtree) intervalParams */
  ASTintervalParams jjtn000 = new ASTintervalParams(JJTINTERVALPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      intervalParam();
      jj_consume_token(TO);
      intervalParam();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void intervalParam() throws ParseException {
 /*@bgen(jjtree) intervalParam */
        ASTintervalParam jjtn000 = new ASTintervalParam(JJTINTERVALPARAM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case YEAR:
        t = jj_consume_token(YEAR);
        break;
      case MONTH:
        t = jj_consume_token(MONTH);
        break;
      case DAY:
        t = jj_consume_token(DAY);
        break;
      case HOUR:
        t = jj_consume_token(HOUR);
        break;
      case SECOND:
        t = jj_consume_token(SECOND);
        break;
      case FRACTION:
        t = jj_consume_token(FRACTION);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setParam(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Identifier() throws ParseException {
                     /*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
                Token t1, t2 = null, mod = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        mod = jj_consume_token(DISTINCT);
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t1 = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 147:
          jj_consume_token(147);
          t2 = jj_consume_token(IDENTIFIER);
          break;
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        break;
      case DESC:
        t1 = jj_consume_token(DESC);
        break;
      case YEAR:
        t1 = jj_consume_token(YEAR);
        break;
      case DATE:
        t1 = jj_consume_token(DATE);
        break;
      case DAY:
        t1 = jj_consume_token(DAY);
        break;
      case MONTH:
        t1 = jj_consume_token(MONTH);
        break;
      case 151:
        t1 = jj_consume_token(151);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                if (t2 == null) {
                        jjtn000.setName(t1.image);
                }
                else {
                        jjtn000.setName(t1.image.concat(".").concat(t2.image));
                }
                jjtn000.setModifier(mod != null ? mod.image : null);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void IdentifierList() throws ParseException {
 /*@bgen(jjtree) IdentifierList */
  ASTIdentifierList jjtn000 = new ASTIdentifierList(JJTIDENTIFIERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      label_6:
      while (true) {
        if (jj_2_7(2)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(150);
        Identifier();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void CompoundStatement() throws ParseException {
 /*@bgen(jjtree) CompoundStatement */
  ASTCompoundStatement jjtn000 = new ASTCompoundStatement(JJTCOMPOUNDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALL:
        case COMMIT:
        case CREATE:
        case CURRENT:
        case DEFINE:
        case EXECUTE:
        case FALSE:
        case FRACTION:
        case LET:
        case NULL:
        case ON:
        case TRACE:
        case RAISE:
        case RETURN:
        case ROLLBACK:
        case SECOND:
        case TODAY:
        case TRUE:
        case NOT:
        case PLUS:
        case MINUS:
        case STAR:
        case DATE:
        case IF:
        case BEGIN:
        case EXIT:
        case CONTINUE:
        case WHILE:
        case FOR:
        case FOREACH:
        case YEAR:
        case DAY:
        case HOUR:
        case MONTH:
        case DROP:
        case LOCK:
        case INSERT:
        case SELECT:
        case DISTINCT:
        case UPDATE:
        case DELETE:
        case SET:
        case DESC:
        case EXISTS:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case FLOAT_LITERAL:
        case IDENTIFIER:
        case 148:
        case 151:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_7;
        }
        Statement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFINE:
      DefinitionStatement();
      break;
    case CALL:
    case CURRENT:
    case EXECUTE:
    case FALSE:
    case FRACTION:
    case LET:
    case NULL:
    case SECOND:
    case TODAY:
    case TRUE:
    case NOT:
    case PLUS:
    case MINUS:
    case STAR:
    case DATE:
    case YEAR:
    case DAY:
    case HOUR:
    case MONTH:
    case DISTINCT:
    case DESC:
    case EXISTS:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case FLOAT_LITERAL:
    case IDENTIFIER:
    case 148:
    case 151:
      ExpressionStatement();
      break;
    case IF:
      IfStatement();
      break;
    case FOR:
      ForStatement();
      break;
    case FOREACH:
      ForEachStatement();
      break;
    case WHILE:
      WhileStatement();
      break;
    case CONTINUE:
      ContinueLoopStatement();
      break;
    case EXIT:
      ExitLoopStatement();
      break;
    case TRACE:
      TraceStatement();
      break;
    case SET:
      SetDebugFileStatement();
      break;
    case RETURN:
      ReturnStatement();
      break;
    case ON:
      OnExceptionStatement();
      break;
    case RAISE:
      RaiseExceptionStatement();
      break;
    default:
      jj_la1[28] = jj_gen;
      if (jj_2_8(2)) {
        BlockStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMIT:
        case ROLLBACK:
        case BEGIN:
          TransactionStatement();
          break;
        case CREATE:
        case DROP:
        case LOCK:
        case INSERT:
        case SELECT:
        case UPDATE:
        case DELETE:
          SQLStatement();
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void BlockStatement() throws ParseException {
 /*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(BEGIN);
      CompoundStatement();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void DefinitionStatement() throws ParseException {
 /*@bgen(jjtree) DefinitionStatement */
  ASTDefinitionStatement jjtn000 = new ASTDefinitionStatement(JJTDEFINITIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DEFINE);
      Identifier();
      PrimitiveType();
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ExpressionStatement() throws ParseException {
 /*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void IfStatement() throws ParseException {
    IfClause();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIF:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_8;
      }
      ElifClause();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      ElseClause();
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
    if (jj_2_9(2)) {
      jj_consume_token(146);
    } else {
      ;
    }
  }

  static final public void IfClause() throws ParseException {
 /*@bgen(jjtree) IfClause */
  ASTIfClause jjtn000 = new ASTIfClause(JJTIFCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      if (jj_2_10(2)) {
        jj_consume_token(148);
      } else {
        ;
      }
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 149:
        jj_consume_token(149);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      jj_consume_token(THEN);
      CompoundStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ElifClause() throws ParseException {
 /*@bgen(jjtree) ElifClause */
  ASTElifClause jjtn000 = new ASTElifClause(JJTELIFCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELIF);
      if (jj_2_11(2)) {
        jj_consume_token(148);
      } else {
        ;
      }
      Expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 149:
        jj_consume_token(149);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      jj_consume_token(THEN);
      CompoundStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ElseClause() throws ParseException {
 /*@bgen(jjtree) ElseClause */
  ASTElseClause jjtn000 = new ASTElseClause(JJTELSECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ELSE);
      CompoundStatement();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOR);
      Identifier();
      jj_consume_token(EQ);
      Expression();
      jj_consume_token(TO);
      Expression();
      CompoundStatement();
      jj_consume_token(END);
      jj_consume_token(FOR);
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ForEachStatement() throws ParseException {
 /*@bgen(jjtree) ForEachStatement */
        ASTForEachStatement jjtn000 = new ASTForEachStatement(JJTFOREACHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token hold = null;
    try {
      jj_consume_token(FOREACH);
      if (jj_2_12(3)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jj_consume_token(IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case WITH:
            jj_consume_token(WITH);
            hold = jj_consume_token(HOLD);
            break;
          default:
            jj_la1[34] = jj_gen;
            ;
          }
          jj_consume_token(FOR);
          break;
        default:
          jj_la1[35] = jj_gen;
          ;
        }
        SelectExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALL:
        case CURRENT:
        case EXECUTE:
        case FALSE:
        case NULL:
        case TODAY:
        case TRUE:
        case STAR:
        case DATE:
        case YEAR:
        case DAY:
        case MONTH:
        case DISTINCT:
        case DESC:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case FLOAT_LITERAL:
        case IDENTIFIER:
        case 148:
        case 151:
          postfixExpression();
          break;
        default:
          jj_la1[36] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      CompoundStatement();
      jj_consume_token(END);
      jj_consume_token(FOREACH);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 146:
        jj_consume_token(146);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setHoldability(hold != null);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      jj_consume_token(148);
      Expression();
      jj_consume_token(149);
      CompoundStatement();
      jj_consume_token(END);
      jj_consume_token(WHILE);
      if (jj_2_13(2)) {
        jj_consume_token(146);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ContinueLoopStatement() throws ParseException {
 /*@bgen(jjtree) ContinueLoopStatement */
  ASTContinueLoopStatement jjtn000 = new ASTContinueLoopStatement(JJTCONTINUELOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case FOREACH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          jj_consume_token(WHILE);
          break;
        case FOREACH:
          jj_consume_token(FOREACH);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      jj_consume_token(146);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ExitLoopStatement() throws ParseException {
 /*@bgen(jjtree) ExitLoopStatement */
  ASTExitLoopStatement jjtn000 = new ASTExitLoopStatement(JJTEXITLOOPSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHILE:
      case FOREACH:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WHILE:
          jj_consume_token(WHILE);
          break;
        case FOREACH:
          jj_consume_token(FOREACH);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(146);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void TraceStatement() throws ParseException {
 /*@bgen(jjtree) TraceStatement */
  ASTTraceStatement jjtn000 = new ASTTraceStatement(JJTTRACESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRACE);
      TraceArgument();
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void TraceArgument() throws ParseException {
 /*@bgen(jjtree) TraceArgument */
  ASTTraceArgument jjtn000 = new ASTTraceArgument(JJTTRACEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ON:
                Token t;
        t = jj_consume_token(ON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case OFF:
        t = jj_consume_token(OFF);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case PROCEDURE:
        t = jj_consume_token(PROCEDURE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void SetDebugFileStatement() throws ParseException {
 /*@bgen(jjtree) SetDebugFileStatement */
  ASTSetDebugFileStatement jjtn000 = new ASTSetDebugFileStatement(JJTSETDEBUGFILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SET);
      jj_consume_token(DEBUG);
      jj_consume_token(FILE);
      jj_consume_token(TO);
      Expression();
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token resume = null;
    try {
      jj_consume_token(RETURN);
      if (jj_2_14(2147483647)) {
        ExpressionList();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case WITH:
          jj_consume_token(WITH);
          resume = jj_consume_token(RESUME);
          break;
        default:
          jj_la1[43] = jj_gen;
          ;
        }
      } else {
        ;
      }
      jj_consume_token(146);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setResume(resume != null);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void OnExceptionStatement() throws ParseException {
 /*@bgen(jjtree) OnExceptionStatement */
  ASTOnExceptionStatement jjtn000 = new ASTOnExceptionStatement(JJTONEXCEPTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ON);
      jj_consume_token(EXCEPTION);
      jj_consume_token(SET);
      IdentifierList();
      CompoundStatement();
      jj_consume_token(END);
      jj_consume_token(EXCEPTION);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void RaiseExceptionStatement() throws ParseException {
 /*@bgen(jjtree) RaiseExceptionStatement */
  ASTRaiseExceptionStatement jjtn000 = new ASTRaiseExceptionStatement(JJTRAISEEXCEPTIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RAISE);
      jj_consume_token(EXCEPTION);
      Expression();
      if (jj_2_16(2)) {
        jj_consume_token(150);
        Expression();
        if (jj_2_15(2)) {
          jj_consume_token(150);
          Expression();
        } else {
          ;
        }
      } else {
        ;
      }
      jj_consume_token(146);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void TransactionStatement() throws ParseException {
 /*@bgen(jjtree) TransactionStatement */
        ASTTransactionStatement jjtn000 = new ASTTransactionStatement(JJTTRANSACTIONSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ROLLBACK:
        t = jj_consume_token(ROLLBACK);
        break;
      case BEGIN:
        t = jj_consume_token(BEGIN);
        break;
      case COMMIT:
        t = jj_consume_token(COMMIT);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORK:
        jj_consume_token(WORK);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
      jj_consume_token(146);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setCommand(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ExpressionList() throws ParseException {
                         /*@bgen(jjtree) ExpressionList */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      label_9:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(150);
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void Expression() throws ParseException {
    assignmentExpression();
  }

  static final public void assignmentExpression() throws ParseException {
 /*@bgen(jjtree) #assignmentExpression(> 1) */
  ASTassignmentExpression jjtn000 = new ASTassignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LET:
        jj_consume_token(LET);
        IdentifierList();
        jj_consume_token(EQ);
        ExpressionList();
        break;
      default:
        jj_la1[46] = jj_gen;
        if (jj_2_18(2)) {
          intervalParams();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CALL:
          case CURRENT:
          case EXECUTE:
          case FALSE:
          case NULL:
          case TODAY:
          case TRUE:
          case NOT:
          case PLUS:
          case MINUS:
          case STAR:
          case DATE:
          case YEAR:
          case DAY:
          case MONTH:
          case DISTINCT:
          case DESC:
          case EXISTS:
          case INTEGER_LITERAL:
          case STRING_LITERAL:
          case FLOAT_LITERAL:
          case IDENTIFIER:
          case 148:
          case 151:
            logicalExpression();
            break;
          default:
            jj_la1[47] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
  }

  static final public void logicalExpression() throws ParseException {
    orExpression();
  }

  static final public void orExpression() throws ParseException {
                                         /*@bgen(jjtree) #orExpression(> 1) */
  ASTorExpression jjtn000 = new ASTorExpression(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      andExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        orExpression();
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void andExpression() throws ParseException {
                                           /*@bgen(jjtree) #andExpression(> 1) */
  ASTandExpression jjtn000 = new ASTandExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      prepositionExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        andExpression();
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/* TODO: Missing BETWEEN...AND */
  static final public void prepositionExpression() throws ParseException {
 /*@bgen(jjtree) #prepositionExpression(> 1) */
        ASTprepositionExpression jjtn000 = new ASTprepositionExpression(JJTPREPOSITIONEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t, not = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case EXISTS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          not = jj_consume_token(NOT);
          break;
        default:
          jj_la1[50] = jj_gen;
          ;
        }
        t = jj_consume_token(EXISTS);
        jj_consume_token(148);
        SelectExpression();
        jj_consume_token(149);
          jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                String oper = t.image;

                if (not != null)
                        oper = "not ".concat(oper);

                jjtn000.setOperator(oper);
        break;
      case CALL:
      case CURRENT:
      case EXECUTE:
      case FALSE:
      case NULL:
      case TODAY:
      case TRUE:
      case PLUS:
      case MINUS:
      case STAR:
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case FLOAT_LITERAL:
      case IDENTIFIER:
      case 148:
      case 151:
        comparisonExpression();
        if (jj_2_19(2)) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
            not = jj_consume_token(NOT);
            break;
          default:
            jj_la1[51] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IN:
            t = jj_consume_token(IN);
            jj_consume_token(148);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CALL:
            case CURRENT:
            case EXECUTE:
            case FALSE:
            case FRACTION:
            case LET:
            case NULL:
            case SECOND:
            case TODAY:
            case TRUE:
            case NOT:
            case PLUS:
            case MINUS:
            case STAR:
            case DATE:
            case YEAR:
            case DAY:
            case HOUR:
            case MONTH:
            case DISTINCT:
            case DESC:
            case EXISTS:
            case INTEGER_LITERAL:
            case STRING_LITERAL:
            case FLOAT_LITERAL:
            case IDENTIFIER:
            case 148:
            case 151:
              ExpressionList();
              break;
            case SELECT:
              SelectExpression();
              break;
            default:
              jj_la1[52] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            jj_consume_token(149);
            break;
          case LIKE:
            t = jj_consume_token(LIKE);
            prepositionExpression();
            break;
          case MATCHES:
            t = jj_consume_token(MATCHES);
            prepositionExpression();
            break;
          case BETWEEN:
            t = jj_consume_token(BETWEEN);
            postfixExpression();
            jj_consume_token(AND);
            postfixExpression();
            break;
          default:
            jj_la1[53] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
                        oper = t.image;

                        if (not != null)
                                oper = "not ".concat(oper);

                        jjtn000.setOperator(oper);
        } else {
          ;
        }
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void comparisonExpression() throws ParseException {
                                                         /*@bgen(jjtree) #comparisonExpression(> 1) */
  ASTcomparisonExpression jjtn000 = new ASTcomparisonExpression(JJTCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
                Token t1, t2 = null;
      quantitativeExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS:
      case NE:
      case NE2:
      case GE:
      case GT:
      case EQ:
      case LE:
      case LT:
      case 152:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LT:
          t1 = jj_consume_token(LT);
          break;
        case LE:
          t1 = jj_consume_token(LE);
          break;
        case EQ:
          t1 = jj_consume_token(EQ);
          break;
        case 152:
          t1 = jj_consume_token(152);
          break;
        case GT:
          t1 = jj_consume_token(GT);
          break;
        case GE:
          t1 = jj_consume_token(GE);
          break;
        case NE:
          t1 = jj_consume_token(NE);
          break;
        case NE2:
          t1 = jj_consume_token(NE2);
          break;
        case IS:
          t1 = jj_consume_token(IS);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NOT:
            t2 = jj_consume_token(NOT);
            break;
          default:
            jj_la1[55] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                String oper = t1.image;
                if (t2 != null)
                        oper = oper.concat(" " + t2.image);

                jjtn000.setOperator(oper);
        comparisonExpression();
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void notExpression() throws ParseException {
                                           /*@bgen(jjtree) #notExpression(> 1) */
  ASTnotExpression jjtn000 = new ASTnotExpression(JJTNOTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      quantitativeExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
        prepositionExpression();
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void quantitativeExpression() throws ParseException {
                                                             /*@bgen(jjtree) #quantitativeExpression(> 1) */
  ASTquantitativeExpression jjtn000 = new ASTquantitativeExpression(JJTQUANTITATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      concatenationExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOME:
      case ALL:
      case ANY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY:
          jj_consume_token(ANY);
          break;
        case ALL:
          jj_consume_token(ALL);
          break;
        case SOME:
          jj_consume_token(SOME);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        quantitativeExpression();
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void concatenationExpression() throws ParseException {
                                                               /*@bgen(jjtree) #concatenationExpression(> 1) */
  ASTconcatenationExpression jjtn000 = new ASTconcatenationExpression(JJTCONCATENATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      additiveExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONCAT:
        jj_consume_token(CONCAT);
        concatenationExpression();
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void additiveExpression() throws ParseException {
                                                     /*@bgen(jjtree) #additiveExpression(> 1) */
  ASTadditiveExpression jjtn000 = new ASTadditiveExpression(JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
                Token t;
      multiplicativeExpression();
      if (jj_2_20(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          t = jj_consume_token(PLUS);
                                jjtn000.setOperator(t.image);
          break;
        case MINUS:
          t = jj_consume_token(MINUS);
                                jjtn000.setOperator(t.image);
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        additiveExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void multiplicativeExpression() throws ParseException {
                                                                 /*@bgen(jjtree) #multiplicativeExpression(> 1) */
  ASTmultiplicativeExpression jjtn000 = new ASTmultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
                Token t;
      unaryExpression();
      if (jj_2_21(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STAR:
          t = jj_consume_token(STAR);
                                jjtn000.setOperator(t.image);
          break;
        case SLASH:
          t = jj_consume_token(SLASH);
                                jjtn000.setOperator(t.image);
          break;
        default:
          jj_la1[63] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicativeExpression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void unaryExpression() throws ParseException {
 /*@bgen(jjtree) #unaryExpression( t != null) */
        ASTunaryExpression jjtn000 = new ASTunaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CURRENT:
      case EXECUTE:
      case FALSE:
      case NULL:
      case TODAY:
      case TRUE:
      case STAR:
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case FLOAT_LITERAL:
      case IDENTIFIER:
      case 148:
      case 151:
        postfixExpression();
        break;
      case PLUS:
        t = jj_consume_token(PLUS);
        unaryExpression();
        break;
      case MINUS:
        t = jj_consume_token(MINUS);
        unaryExpression();
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000,  t != null);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                if (t != null)
                        jjtn000.setOperator(t.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  t != null);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void postfixExpression() throws ParseException {
 /*@bgen(jjtree) #postfixExpression(> 1) */
        ASTpostfixExpression jjtn000 = new ASTpostfixExpression(JJTPOSTFIXEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token tProc = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CURRENT:
      case FALSE:
      case NULL:
      case TODAY:
      case TRUE:
      case STAR:
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case FLOAT_LITERAL:
      case IDENTIFIER:
      case 148:
      case 151:
        unitsExpression();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 148:
          jj_consume_token(148);
          ExpressionList();
          jj_consume_token(149);
          break;
        default:
          jj_la1[65] = jj_gen;
          ;
        }
        break;
      case EXECUTE:
        tProc = jj_consume_token(EXECUTE);
        jj_consume_token(PROCEDURE);
        Identifier();
        jj_consume_token(148);
        ExpressionList();
        jj_consume_token(149);
        if (jj_2_22(2)) {
          IntoClause();
        } else {
          ;
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        if (jj_2_24(2)) {
          tProc = jj_consume_token(CALL);
          Identifier();
          jj_consume_token(148);
          if (jj_2_23(2147483647)) {
            ExpressionList();
          } else {
            ;
          }
          jj_consume_token(149);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURNING:
            jj_consume_token(RETURNING);
            IdentifierList();
            break;
          default:
            jj_la1[66] = jj_gen;
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setProcedureCall(tProc != null);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void unitsExpression() throws ParseException {
                                               /*@bgen(jjtree) #unitsExpression(> 1) */
  ASTunitsExpression jjtn000 = new ASTunitsExpression(JJTUNITSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      substringExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNITS:
        jj_consume_token(UNITS);
        intervalParam();
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void substringExpression() throws ParseException {
 /*@bgen(jjtree) #substringExpression(> 1) */
  ASTsubstringExpression jjtn000 = new ASTsubstringExpression(JJTSUBSTRINGEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      primaryExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 153:
        jj_consume_token(153);
        Literal();
        jj_consume_token(150);
        Literal();
        jj_consume_token(154);
        break;
      default:
        jj_la1[69] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void primaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DATE:
    case YEAR:
    case DAY:
    case MONTH:
    case DISTINCT:
    case DESC:
    case IDENTIFIER:
    case 151:
      Identifier();
      break;
    case CURRENT:
    case FALSE:
    case NULL:
    case TODAY:
    case TRUE:
    case STAR:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case FLOAT_LITERAL:
      Literal();
      break;
    case 148:
      NestedExpression();
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NestedExpression() throws ParseException {
 /*@bgen(jjtree) NestedExpression */
  ASTNestedExpression jjtn000 = new ASTNestedExpression(JJTNESTEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(148);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CALL:
      case CURRENT:
      case EXECUTE:
      case FALSE:
      case NULL:
      case TODAY:
      case TRUE:
      case NOT:
      case PLUS:
      case MINUS:
      case STAR:
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case SELECT:
      case DISTINCT:
      case DESC:
      case EXISTS:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case FLOAT_LITERAL:
      case IDENTIFIER:
      case 148:
      case 151:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CALL:
        case CURRENT:
        case EXECUTE:
        case FALSE:
        case NULL:
        case TODAY:
        case TRUE:
        case NOT:
        case PLUS:
        case MINUS:
        case STAR:
        case DATE:
        case YEAR:
        case DAY:
        case MONTH:
        case DISTINCT:
        case DESC:
        case EXISTS:
        case INTEGER_LITERAL:
        case STRING_LITERAL:
        case FLOAT_LITERAL:
        case IDENTIFIER:
        case 148:
        case 151:
          logicalExpression();
          break;
        case SELECT:
          SelectExpression();
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      jj_consume_token(149);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/****************** LITERALS ********************/
  static final public void Literal() throws ParseException {
 /*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
                Token t;
        t = jj_consume_token(INTEGER_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case STRING_LITERAL:
        t = jj_consume_token(STRING_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case FLOAT_LITERAL:
        t = jj_consume_token(FLOAT_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case TRUE:
        t = jj_consume_token(TRUE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case FALSE:
        t = jj_consume_token(FALSE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case NULL:
        t = jj_consume_token(NULL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case CURRENT:
        t = jj_consume_token(CURRENT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case TODAY:
        t = jj_consume_token(TODAY);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      case STAR:
        t = jj_consume_token(STAR);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setName(t.image);
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

/* SQL Statement Production aggregate */
  static final public void SQLStatement() throws ParseException {
                       /*@bgen(jjtree) SQLStatement */
  ASTSQLStatement jjtn000 = new ASTSQLStatement(JJTSQLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DROP:
        dropTableExpression();
        break;
      case CREATE:
        CreateTableStatement();
        break;
      case LOCK:
        LockTableExpression();
        break;
      case SELECT:
        SelectExpression();
        break;
      case INSERT:
        InsertExpression();
        break;
      case UPDATE:
        UpdateExpression();
        break;
      case DELETE:
        DeleteExpression();
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 146:
        jj_consume_token(146);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void LockTableExpression() throws ParseException {
 /*@bgen(jjtree) LockTableExpression */
        ASTLockTableExpression jjtn000 = new ASTLockTableExpression(JJTLOCKTABLEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token mode;
    try {
      jj_consume_token(LOCK);
      jj_consume_token(TABLE);
      Identifier();
      jj_consume_token(IN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXCLUSIVE:
        mode = jj_consume_token(EXCLUSIVE);
        break;
      case SHARE:
        mode = jj_consume_token(SHARE);
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(MODE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setMode(mode.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void dropTableExpression() throws ParseException {
                              /*@bgen(jjtree) dropTableExpression */
  ASTdropTableExpression jjtn000 = new ASTdropTableExpression(JJTDROPTABLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(TABLE);
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void CreateTableStatement() throws ParseException {
 /*@bgen(jjtree) CreateTableStatement */
  ASTCreateTableStatement jjtn000 = new ASTCreateTableStatement(JJTCREATETABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
                Token t1 = null;
      jj_consume_token(CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TEMP:
        t1 = jj_consume_token(TEMP);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
      jj_consume_token(TABLE);
      Identifier();
      jj_consume_token(148);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case IDENTIFIER:
      case 151:
        ArgumentList();
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      jj_consume_token(149);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WITH:
        jj_consume_token(WITH);
        jj_consume_token(NO);
        jj_consume_token(LOG);
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setModifier(t1 != null ? t1.image : null);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void InsertExpression() throws ParseException {
 /*@bgen(jjtree) InsertExpression */
  ASTInsertExpression jjtn000 = new ASTInsertExpression(JJTINSERTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      InsertClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUES:
        ValuesClause();
        break;
      case SELECT:
        SelectExpression();
        break;
      default:
        jj_la1[80] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void SelectExpression() throws ParseException {
 /*@bgen(jjtree) SelectExpression */
  ASTSelectExpression jjtn000 = new ASTSelectExpression(JJTSELECTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SelectClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTO:
        IntoClause();
        break;
      default:
        jj_la1[81] = jj_gen;
        ;
      }
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        WhereClause();
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        GroupByClause();
        break;
      default:
        jj_la1[83] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        OrderByClause();
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        jj_consume_token(UNION);
        SelectExpression();
        break;
      default:
        jj_la1[85] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void UpdateExpression() throws ParseException {
 /*@bgen(jjtree) UpdateExpression */
  ASTUpdateExpression jjtn000 = new ASTUpdateExpression(JJTUPDATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      UpdateClause();
      SetClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        WhereClause();
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void DeleteExpression() throws ParseException {
 /*@bgen(jjtree) DeleteExpression */
  ASTDeleteExpression jjtn000 = new ASTDeleteExpression(JJTDELETEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      DeleteClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        WhereClause();
        break;
      default:
        jj_la1[87] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void DeleteClause() throws ParseException {
 /*@bgen(jjtree) DeleteClause */
  ASTDeleteClause jjtn000 = new ASTDeleteClause(JJTDELETECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void InsertClause() throws ParseException {
 /*@bgen(jjtree) InsertClause */
  ASTInsertClause jjtn000 = new ASTInsertClause(JJTINSERTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 148:
        jj_consume_token(148);
        IdentifierList();
        jj_consume_token(149);
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void SelectClause() throws ParseException {
 /*@bgen(jjtree) SelectClause */
  ASTSelectClause jjtn000 = new ASTSelectClause(JJTSELECTCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SELECT);
      ExpressionList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void UpdateClause() throws ParseException {
 /*@bgen(jjtree) UpdateClause */
  ASTUpdateClause jjtn000 = new ASTUpdateClause(JJTUPDATECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(UPDATE);
      Identifier();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void FromClause() throws ParseException {
 /*@bgen(jjtree) FromClause */
  ASTFromClause jjtn000 = new ASTFromClause(JJTFROMCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FROM);
      FromExpressionList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void IntoClause() throws ParseException {
 /*@bgen(jjtree) IntoClause */
  ASTIntoClause jjtn000 = new ASTIntoClause(JJTINTOCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INTO);
      IdentifierList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void ValuesClause() throws ParseException {
 /*@bgen(jjtree) ValuesClause */
  ASTValuesClause jjtn000 = new ASTValuesClause(JJTVALUESCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VALUES);
      jj_consume_token(148);
      ExpressionList();
      jj_consume_token(149);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void SetClause() throws ParseException {
 /*@bgen(jjtree) SetClause */
  ASTSetClause jjtn000 = new ASTSetClause(JJTSETCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SET);
      SetExpressionList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void SetExpressionList() throws ParseException {
 /*@bgen(jjtree) SetExpressionList */
  ASTSetExpressionList jjtn000 = new ASTSetExpressionList(JJTSETEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SetExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[89] = jj_gen;
          break label_10;
        }
        jj_consume_token(150);
        SetExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void SetExpression() throws ParseException {
 /*@bgen(jjtree) SetExpression */
  ASTSetExpression jjtn000 = new ASTSetExpression(JJTSETEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case IDENTIFIER:
      case 151:
        Identifier();
        jj_consume_token(EQ);
        Expression();
        break;
      case 148:
        jj_consume_token(148);
        IdentifierList();
        jj_consume_token(149);
        jj_consume_token(EQ);
        jj_consume_token(148);
        ExpressionList();
        jj_consume_token(149);
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
  }

  static final public void WhereClause() throws ParseException {
 /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHERE);
      logicalExpression();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void GroupByClause() throws ParseException {
 /*@bgen(jjtree) GroupByClause */
  ASTGroupByClause jjtn000 = new ASTGroupByClause(JJTGROUPBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GROUP);
      jj_consume_token(BY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case IDENTIFIER:
      case 151:
        IdentifierList();
        break;
      case CURRENT:
      case FALSE:
      case NULL:
      case TODAY:
      case TRUE:
      case STAR:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case FLOAT_LITERAL:
        Literal();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void OrderByClause() throws ParseException {
 /*@bgen(jjtree) OrderByClause */
  ASTOrderByClause jjtn000 = new ASTOrderByClause(JJTORDERBYCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ORDER);
      jj_consume_token(BY);
      OrderByExpressionList();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void FromExpressionList() throws ParseException {
 /*@bgen(jjtree) FromExpressionList */
  ASTFromExpressionList jjtn000 = new ASTFromExpressionList(JJTFROMEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      FromExpression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_11;
        }
        jj_consume_token(150);
        FromExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void FromExpression() throws ParseException {
 /*@bgen(jjtree) FromExpression */
        ASTFromExpression jjtn000 = new ASTFromExpression(JJTFROMEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token tOuter = null;
        Token tInner = null;
    try {
      if (jj_2_25(2)) {
        jj_consume_token(148);
        SelectExpression();
        jj_consume_token(149);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OUTER:
          tOuter = jj_consume_token(OUTER);
          TableDecl();
          break;
        case DATE:
        case YEAR:
        case DAY:
        case MONTH:
        case DISTINCT:
        case DESC:
        case IDENTIFIER:
        case 148:
        case 151:
          TableDecl();
          label_12:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INNER:
              ;
              break;
            default:
              jj_la1[93] = jj_gen;
              break label_12;
            }
            tInner = jj_consume_token(INNER);
            jj_consume_token(JOIN);
            TableDecl();
            jj_consume_token(ON);
            logicalExpression();
          }
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setOuter(tOuter != null);
                jjtn000.setInner(tInner != null);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void OrderByExpressionList() throws ParseException {
 /*@bgen(jjtree) OrderByExpressionList */
  ASTOrderByExpressionList jjtn000 = new ASTOrderByExpressionList(JJTORDERBYEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      OrderByExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[95] = jj_gen;
          break label_13;
        }
        jj_consume_token(150);
        OrderByExpression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void OrderByExpression() throws ParseException {
 /*@bgen(jjtree) OrderByExpression */
        ASTOrderByExpression jjtn000 = new ASTOrderByExpression(JJTORDERBYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        jjtn000.jjtSetFirstToken(getToken(1));Token modifier = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATE:
      case YEAR:
      case DAY:
      case MONTH:
      case DISTINCT:
      case DESC:
      case IDENTIFIER:
      case 151:
        Identifier();
        break;
      case CURRENT:
      case FALSE:
      case NULL:
      case TODAY:
      case TRUE:
      case STAR:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case FLOAT_LITERAL:
        Literal();
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESC:
      case ASC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
          modifier = jj_consume_token(ASC);
          break;
        case DESC:
          modifier = jj_consume_token(DESC);
          break;
        default:
          jj_la1[97] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[98] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
                jjtn000.setModifier(modifier != null ? modifier.image : null);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void TableDeclList() throws ParseException {
 /*@bgen(jjtree) TableDeclList */
  ASTTableDeclList jjtn000 = new ASTTableDeclList(JJTTABLEDECLLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      TableDecl();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[99] = jj_gen;
          break label_14;
        }
        jj_consume_token(150);
        TableDecl();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void TableDecl() throws ParseException {
 /*@bgen(jjtree) TableDecl */
  ASTTableDecl jjtn000 = new ASTTableDecl(JJTTABLEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 148:
        jj_consume_token(148);
        break;
      default:
        jj_la1[100] = jj_gen;
        ;
      }
      Identifier();
      if (jj_2_26(2)) {
        Identifier();
      } else {
        ;
      }
      if (jj_2_27(2)) {
        jj_consume_token(149);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void AssignmentStatementList() throws ParseException {
                                  /*@bgen(jjtree) AssignmentStatementList */
  ASTAssignmentStatementList jjtn000 = new ASTAssignmentStatementList(JJTASSIGNMENTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AssignmentStatement();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 150:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_15;
        }
        jj_consume_token(150);
        AssignmentStatement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static final public void AssignmentStatement() throws ParseException {
                              /*@bgen(jjtree) AssignmentStatement */
  ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_28(3)) {
        postfixExpression();
        jj_consume_token(EQ);
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 148:
          jj_consume_token(148);
          Identifier();
          label_16:
          while (true) {
            jj_consume_token(150);
            Identifier();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 150:
              ;
              break;
            default:
              jj_la1[102] = jj_gen;
              break label_16;
            }
          }
          jj_consume_token(149);
          jj_consume_token(EQ);
          jj_consume_token(148);
          Expression();
          label_17:
          while (true) {
            jj_consume_token(150);
            Expression();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 150:
              ;
              break;
            default:
              jj_la1[103] = jj_gen;
              break label_17;
            }
          }
          jj_consume_token(149);
          break;
        default:
          jj_la1[104] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_3R_130() {
    if (jj_scan_token(CURRENT)) return true;
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_3R_103()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    if (jj_3R_102()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    if (jj_3R_101()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_100()) return true;
    return false;
  }

  static private boolean jj_3R_129() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    if (jj_3R_99()) return true;
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_98()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_97()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    if (jj_3R_96()) return true;
    return false;
  }

  static private boolean jj_3R_128() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    if (jj_3R_95()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_3R_94()) return true;
    return false;
  }

  static private boolean jj_3R_145() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_93()) return true;
    return false;
  }

  static private boolean jj_3R_127() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_126() {
    if (jj_scan_token(FLOAT_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_169() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_125() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(147)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_124() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_92() {
    if (jj_scan_token(153)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(150)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(154)) return true;
    return false;
  }

  static private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_144() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_140() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(UNITS)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_123() {
    if (jj_scan_token(148)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3R_112() {
    if (jj_3R_123()) return true;
    return false;
  }

  static private boolean jj_3R_111() {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_110() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_scan_token(148)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(124)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(CALL)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(148)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_169()) jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_3R_21()) return true;
    if (jj_scan_token(148)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(149)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_51()) return true;
    if (jj_scan_token(TO)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(148)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(150)) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(147)) return true;
    return false;
  }

  static private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_6()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(147)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_164() {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  static private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    }
    if (jj_3R_90()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_53()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) return true;
    }
    if (jj_scan_token(147)) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(147)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_37()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3R_109() {
    if (jj_3R_34()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_90() {
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_158() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_156() {
    if (jj_scan_token(IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_157() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) return true;
    }
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_3R_90()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_39()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(BETWEEN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(MATCHES)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(LIKE)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(IN)) return true;
    if (jj_scan_token(148)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_139() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  static private boolean jj_3R_174() {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(148)) jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_168() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_167()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_71()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_122() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) jj_scanpos = xsp;
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(148)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3R_173() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  static private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_175()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_172() {
    if (jj_scan_token(INNER)) return true;
    if (jj_scan_token(JOIN)) return true;
    if (jj_3R_171()) return true;
    if (jj_scan_token(ON)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3R_162() {
    if (jj_3R_113()) return true;
    return false;
  }

  static private boolean jj_3R_163() {
    if (jj_3R_167()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_168()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_108() {
    if (jj_3R_52()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_160() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  static private boolean jj_3R_89() {
    if (jj_3R_108()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_166() {
    if (jj_3R_171()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_165() {
    if (jj_scan_token(OUTER)) return true;
    if (jj_3R_171()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    if (jj_3R_89()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(148)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(149)) return true;
    return false;
  }

  static private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(150)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(LET)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_161() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_151() {
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_154() {
    if (jj_scan_token(ORDER)) return true;
    if (jj_scan_token(BY)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_153() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_scan_token(BY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) return true;
    }
    return false;
  }

  static private boolean jj_3R_148() {
    if (jj_3R_154()) return true;
    return false;
  }

  static private boolean jj_3R_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_152() {
    if (jj_scan_token(WHERE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_105() {
    if (jj_scan_token(RAISE)) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(146)) return true;
    return false;
  }

  static private boolean jj_3R_104() {
    if (jj_scan_token(ON)) return true;
    return false;
  }

  static private boolean jj_3R_147() {
    if (jj_3R_153()) return true;
    return false;
  }

  static private boolean jj_3R_103() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  static private boolean jj_3R_102() {
    if (jj_scan_token(SET)) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_146() {
    if (jj_3R_152()) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  static private boolean jj_3R_142() {
    if (jj_scan_token(UPDATE)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(HOLD)) return true;
    return false;
  }

  static private boolean jj_3R_101() {
    if (jj_scan_token(TRACE)) return true;
    return false;
  }

  static private boolean jj_3R_141() {
    if (jj_scan_token(INSERT)) return true;
    return false;
  }

  static private boolean jj_3R_100() {
    if (jj_scan_token(EXIT)) return true;
    return false;
  }

  static private boolean jj_3R_143() {
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3R_99() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  static private boolean jj_3R_138() {
    if (jj_3R_143()) return true;
    return false;
  }

  static private boolean jj_3R_98() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  static private boolean jj_3R_137() {
    if (jj_3R_142()) return true;
    return false;
  }

  static private boolean jj_3R_149() {
    if (jj_scan_token(UNION)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_97() {
    if (jj_scan_token(FOREACH)) return true;
    return false;
  }

  static private boolean jj_3R_136() {
    if (jj_3R_141()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(146)) return true;
    return false;
  }

  static private boolean jj_3R_96() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(148)) return true;
    return false;
  }

  static private boolean jj_3R_134() {
    if (jj_scan_token(CREATE)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(146)) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(148)) return true;
    return false;
  }

  static private boolean jj_3R_133() {
    if (jj_scan_token(DROP)) return true;
    return false;
  }

  static private boolean jj_3R_170() {
    if (jj_scan_token(RETURNING)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_114() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  static private boolean jj_3R_135() {
    if (jj_scan_token(LOCK)) return true;
    return false;
  }

  static private boolean jj_3R_95() {
    if (jj_3R_114()) return true;
    return false;
  }

  static private boolean jj_3R_121() {
    if (jj_3R_138()) return true;
    return false;
  }

  static private boolean jj_3R_120() {
    if (jj_3R_137()) return true;
    return false;
  }

  static private boolean jj_3R_94() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_119() {
    if (jj_3R_136()) return true;
    return false;
  }

  static private boolean jj_3R_118() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_117() {
    if (jj_3R_135()) return true;
    return false;
  }

  static private boolean jj_3R_116() {
    if (jj_3R_134()) return true;
    return false;
  }

  static private boolean jj_3R_115() {
    if (jj_3R_133()) return true;
    return false;
  }

  static private boolean jj_3R_93() {
    if (jj_scan_token(DEFINE)) return true;
    return false;
  }

  static private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(BEGIN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  static private boolean jj_3R_132() {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  static private boolean jj_3R_88() {
    if (jj_3R_107()) return true;
    return false;
  }

  static private boolean jj_3R_131() {
    if (jj_scan_token(TODAY)) return true;
    return false;
  }

  static private boolean jj_3R_87() {
    if (jj_3R_106()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_86() {
    if (jj_3R_105()) return true;
    return false;
  }

  static private boolean jj_3R_85() {
    if (jj_3R_104()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SPLParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[105];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x201000,0x201000,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0xc9cebc00,0xc9cea400,0x1800,0x0,0x0,0x0,0x0,0x0,0x0,0x862400,0x0,0x0,0x0,0x0,0x0,0x23000000,0x0,0x800,0x0,0x400000,0x862400,0x0,0x0,0x0,0x0,0xce2400,0x0,0x862400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x862400,0x0,0x0,0x862000,0x0,0x0,0x842000,0x862400,0x862400,0x842000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x842000,0x0,0x0,0x0,0x0,0x842000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x0,0x0,0x0,0x0,0x0,0x10,0x10,0x0,0x0,0x0,0x708000d8,0x708000d0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x400000c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x100,0x0,0x708000c0,0x400,0x200,0x800000,0x800000,0x708000d0,0xe800,0x708000c0,0x800000,0x7f1000,0x7f1000,0x800000,0x7000000,0x7000000,0x8000000,0x30000000,0xc0000000,0x700000c0,0x0,0x1,0x400000c0,0x0,0x0,0x400000c0,0x708000c0,0x708000c0,0x400000c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000c0,0x0,0x0,0x0,0x0,0x400000c0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x3fffffc,0x0,0x0,0x0,0x0,0x0,0x100,0x44000100,0x4000100,0x40000000,0x10000000,0x20000000,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x100,0x2,0x0,0x100,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x100,0x0,0x0,0x100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000580,0x0,0x0,0x0,0x0,0x0,0x0,0x10000580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x780,0x780,0x10000000,0x0,0x580,0xf4900ff3,0x900007f3,0x64900800,0x0,0x0,0x0,0x0,0x4000,0x0,0x10000580,0x0,0x50,0x50,0x50,0x50,0x0,0x4000,0x0,0x0,0x0,0x10000580,0x0,0x0,0x0,0x0,0x14000780,0x0,0x10000580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000580,0x0,0x0,0x10000580,0x0,0x0,0x10000580,0x14000580,0x14000580,0x0,0x64900800,0x0,0x600000,0x2000,0x10000580,0x4000,0x6000000,0x1000000,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x10000580,0x10000580,0x0,0x0,0x10000580,0x0,0x10000580,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x40000,0x40000,0xa000,0xa000,0x80000,0x808020,0x0,0x0,0xa000,0x0,0xa000,0xa000,0x808020,0x0,0x0,0x400000,0x400000,0x8000,0x0,0x400000,0x100000,0x0,0x0,0x80000,0x808020,0x90f820,0x90f820,0x0,0x0,0x0,0x200000,0x200000,0x0,0x8000,0x90f020,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90f820,0x0,0x0,0x0,0x0,0x90f820,0x0,0x90f820,0x0,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x90f020,0x100000,0x0,0x90f020,0x0,0x2000000,0x90f020,0x90f820,0x90f820,0x7000,0x0,0x40000,0x0,0x0,0x808020,0x0,0x0,0x0,0x2,0x8,0x4,0x0,0x2,0x2,0x100000,0x400000,0x908020,0x80f020,0x400000,0x200,0x908120,0x400000,0x80f020,0x60,0x60,0x400000,0x100000,0x400000,0x400000,0x400000,0x100000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[28];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SPLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SPLParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SPLParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SPLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SPLParser(SPLParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SPLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 105; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[155];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 105; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 155; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 28; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
