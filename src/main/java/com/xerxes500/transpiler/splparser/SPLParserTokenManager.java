/* Generated By:JJTree&JavaCC: Do not edit this line. SPLParserTokenManager.java */
package com.xerxes500.transpiler.splparser;
import com.xerxes500.transpiler.splparser.node.*;

/** Token Manager. */
public class SPLParserTokenManager implements SPLParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2000000000000000L) != 0L)
            return 0;
         if ((active0 & 0x1000000000000000L) != 0L)
            return 36;
         if ((active0 & 0x8000000000000000L) != 0L)
            return 9;
         if ((active0 & 0x780fffffffffe00L) != 0L || (active1 & 0xfffffffffffffffeL) != 0L || (active2 & 0x800fffL) != 0L)
         {
            jjmatchedKind = 143;
            return 23;
         }
         return -1;
      case 1:
         if ((active0 & 0x700e39ffeeffc00L) != 0L || (active1 & 0xfe7dfff7fbff0feeL) != 0L || (active2 & 0x800dabL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 143;
               jjmatchedPos = 1;
            }
            return 23;
         }
         if ((active0 & 0x801c6001100200L) != 0L || (active1 & 0x18200080400f010L) != 0L || (active2 & 0x254L) != 0L)
            return 23;
         return -1;
      case 2:
         if ((active0 & 0x100e1dffcafbc00L) != 0L || (active1 & 0x7ef9fe977bff0ffeL) != 0L || (active2 & 0x800fafL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 143;
               jjmatchedPos = 2;
            }
            return 23;
         }
         if ((active0 & 0x680020002404000L) != 0L || (active1 & 0x810401608000f000L) != 0L || (active2 & 0x40L) != 0L)
            return 23;
         return -1;
      case 3:
         if ((active0 & 0x100218004800400L) != 0L || (active1 & 0x118ea81390023f4L) != 0L || (active2 & 0x4a1L) != 0L)
            return 23;
         if ((active0 & 0xc05ff82fb800L) != 0L || (active1 & 0x7ee1145642ffcc0aL) != 0L || (active2 & 0x800b0eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 143;
               jjmatchedPos = 3;
            }
            return 23;
         }
         return -1;
      case 4:
         if ((active0 & 0xc01fa00bb800L) != 0L || (active1 & 0x76c1004602f9c648L) != 0L || (active2 & 0x800800L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 4;
            return 23;
         }
         if ((active0 & 0x4058240000L) != 0L || (active1 & 0x820141040060802L) != 0L || (active2 & 0x30eL) != 0L)
            return 23;
         return -1;
      case 5:
         if ((active0 & 0xc008200b2000L) != 0L || (active1 & 0x1040004202c9c648L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 143;
               jjmatchedPos = 5;
            }
            return 23;
         }
         if ((active0 & 0x1780009800L) != 0L || (active1 & 0x6681000400300000L) != 0L || (active2 & 0x800L) != 0L)
            return 23;
         return -1;
      case 6:
         if ((active0 & 0xc00200022000L) != 0L || (active1 & 0x4002204408L) != 0L)
            return 23;
         if ((active0 & 0x920090000L) != 0L || (active1 & 0x1040000200c98240L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 6;
            return 23;
         }
         return -1;
      case 7:
         if ((active0 & 0x120010000L) != 0L || (active1 & 0x40000000400040L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 7;
            return 23;
         }
         if ((active0 & 0x800080000L) != 0L || (active1 & 0x1000000200898200L) != 0L)
            return 23;
         return -1;
      case 8:
         if ((active1 & 0x400040L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 8;
            return 23;
         }
         if ((active0 & 0x120010000L) != 0L || (active1 & 0x40000000000000L) != 0L)
            return 23;
         return -1;
      case 9:
         if ((active1 & 0x400000L) != 0L)
            return 23;
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 9;
            return 23;
         }
         return -1;
      case 10:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 10;
            return 23;
         }
         return -1;
      case 11:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 11;
            return 23;
         }
         return -1;
      case 12:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 12;
            return 23;
         }
         return -1;
      case 13:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 13;
            return 23;
         }
         return -1;
      case 14:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 14;
            return 23;
         }
         return -1;
      case 15:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 15;
            return 23;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 148);
      case 41:
         return jjStopAtPos(0, 149);
      case 42:
         return jjStopAtPos(0, 62);
      case 43:
         return jjStartNfaWithStates_0(0, 60, 36);
      case 44:
         return jjStopAtPos(0, 150);
      case 45:
         return jjStartNfaWithStates_0(0, 61, 0);
      case 46:
         return jjStopAtPos(0, 147);
      case 47:
         return jjStartNfaWithStates_0(0, 63, 9);
      case 58:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L, 0x0L);
      case 59:
         return jjStopAtPos(0, 146);
      case 60:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x22000000000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 62:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 153);
      case 93:
         return jjStopAtPos(0, 154);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x600020000000200L, 0x0L, 0x40L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x4000001cL, 0x10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3c00L, 0x2000000e0L, 0x800000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1000c000L, 0x5000090800000700L, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x30000L, 0x400001b0000000L, 0x800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40c0000L, 0x6000000800L, 0x1L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x300000L, 0x0L, 0x8L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x820000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x180000000000L, 0x18000000400f000L, 0x200L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x200000400000L, 0x14000000010000L, 0x400L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x8040000020000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80000000800000L, 0x20000000c0000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x40003000000L, 0x0L, 0x104L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0xfc0000000L, 0x1000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100001000000000L, 0x8420000400f00000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0xe008000000L, 0x300009000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2800000000000002L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000002000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x401000000000L, 0x2L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L, 0x0L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 58:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         break;
      case 61:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         break;
      case 62:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400040040400L, active1, 0x200110002000300L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x801790408000L, active1, 0xc401208041300400L, active2, 0x420L);
      case 70:
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 90, 23);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20001008000060L, active2, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200004000000L, active1, 0x1000400000000000L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x30000884L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc00000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(1, 24, 23);
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400020000000000L, active1, 0x98000008000f002L, active2, 0x200L);
      case 79:
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 23);
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 99, 23);
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x180014800000800L, active1, 0x1c866200020008L, active2, 0x800080L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8028281000L, active1, 0x80000000000L, active2, 0xdL);
      case 83:
      case 115:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 44, 23);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x802000L, active1, 0L, active2, 0x100L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x90000L, active2, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L, active1, 0x40000100000000L, active2, 0x800L);
      case 89:
      case 121:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 132;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10L, active2, 0L);
      case 124:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x8280000L, active1, 0x20008000c90060L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x100000000000L, active2, 0L);
      case 67:
      case 99:
         if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 134, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000010000L, active1, 0x50000000000400L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 23);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 95, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x2008000000000000L, active2, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x21000L, active1, 0x8000000L, active2, 0x2L);
      case 70:
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L, active2, 0x400L);
      case 71:
      case 103:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 114, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L, active1, 0x800001510000002L, active2, 0x880L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0x804840400L, active1, 0x4600800000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000800L, active1, 0x200000000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40200020000L, active2, 0x200L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0x8000000088cL, active2, 0x9L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000002000L, active1, 0x4002300000L, active2, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1081000020000000L, active2, 0x20L);
      case 84:
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 23);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 23);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 127, 23);
         return jjMoveStringLiteralDfa3_0(active0, 0xc00380000000L, active1, 0x10040000000e310L, active2, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0x20000000000L, active2, 0x800000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 23);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 104, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 56:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 23);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000001000L, active1, 0x2000000000040800L, active2, 0L);
      case 66:
      case 98:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 23);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 23);
         break;
      case 67:
      case 99:
         if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000280a0000L, active1, 0x2000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 111, 23);
         break;
      case 69:
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 23);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 23);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 23);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 56, 23);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 23);
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 23);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0x448000400002c200L, active2, 0x304L);
      case 70:
      case 102:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 23);
         break;
      case 72:
      case 104:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 110, 23);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x40300400L, active2, 0L);
      case 75:
      case 107:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 23);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 23);
         break;
      case 76:
      case 108:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 23);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0x40101000c00008L, active2, 0L);
      case 77:
      case 109:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 128, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 23);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 135, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L, active2, 0x800000L);
      case 79:
      case 111:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 120, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x1400000000L, active1, 0x800000000000000L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 107, 23);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 109, 23);
         break;
      case 82:
      case 114:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 23);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 105, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L, active1, 0x20000000090040L, active2, 0x2L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40040000L, active1, 0L, active2, 0x800L);
      case 84:
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 23);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 23);
         else if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 138, 23);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000040600000002L, active2, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x390000000L, active1, 0x201000000000000L, active2, 0x8L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000300040L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000400090000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 23);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 23);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 23);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 23);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 108, 23);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 117, 23);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x800020002000L, active1, 0x200000000000008L, active2, 0L);
      case 71:
      case 103:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x2000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x1000000200000000L, active2, 0L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc00000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000400L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 23);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000008000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 23);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 23);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 136, 23);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 137, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x380000000L, active1, 0x80000000008000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 65, 23);
         break;
      case 84:
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 23);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 23);
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 143, 23);
         return jjMoveStringLiteralDfa5_0(active0, 0x81000L, active1, 0x6000000000000200L, active2, 0x800L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000L, active1, 0x40000000000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 23);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0x2000408L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000000040L, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L, active1, 0L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 23);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 23);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 23);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 23);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 23);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0xc00000000000L, active1, 0x4000L, active2, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x90000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0x800200L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x300002000L, active1, 0x1000000200000000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 121, 23);
         else if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 139, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 23);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 23);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 23);
         return jjMoveStringLiteralDfa6_0(active0, 0x30000L, active1, 0L, active2, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 56:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 23);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x98000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0x1000000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 23);
         break;
      case 72:
      case 104:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 102, 23);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100010000L, active1, 0x40000000000000L);
      case 76:
      case 108:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 23);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L, active1, 0L);
      case 82:
      case 114:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 78, 23);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 23);
         break;
      case 83:
      case 115:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 23);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 23);
         break;
      case 84:
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 23);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 23);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 23);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40L);
      case 75:
      case 107:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 23);
         break;
      case 76:
      case 108:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 79, 23);
         break;
      case 78:
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 23);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L, active1, 0x400000L);
      case 82:
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 23);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 83, 23);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(7, 87, 23);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 124, 23);
         break;
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 69:
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(8, 29, 23);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 23);
         break;
      case 71:
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 23);
         break;
      case 78:
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 23);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0x40L);
      case 84:
      case 116:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 86, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 86:
      case 118:
         return jjMoveStringLiteralDfa11_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         return jjMoveStringLiteralDfa13_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 89:
      case 121:
         return jjMoveStringLiteralDfa14_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa15_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa16_0(active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
static private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(16, 70, 23);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 36;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 36:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 25);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(32);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 25);
                  else if (curChar == 45)
                     jjCheckNAddStates(0, 2);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(32);
                  }
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(3, 5);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(6, 7);
                  else if (curChar == 48)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAdd(25);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(20, 21);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 9;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  jjAddStates(8, 9);
                  break;
               case 9:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 42)
                     jjCheckNAddStates(10, 12);
                  break;
               case 12:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 13:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 14:
                  if (curChar == 47 && kind > 3)
                     kind = 3;
                  break;
               case 15:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 141)
                     kind = 141;
                  break;
               case 19:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 39 && kind > 141)
                     kind = 141;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if (curChar != 48)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if (curChar != 46)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(13, 15);
                  break;
               case 26:
                  if (curChar != 48)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(13, 15);
                  break;
               case 27:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(16, 19);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 142)
                     kind = 142;
                  jjCheckNAddStates(16, 19);
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 31:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(32);
                  break;
               case 33:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 25);
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(34, 25);
                  break;
               case 35:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(3, 5);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 143)
                        kind = 143;
                     jjCheckNAdd(23);
                  }
                  else if (curChar == 123)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar == 125 && kind > 2)
                     kind = 2;
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  jjCheckNAddTwoStates(13, 11);
                  break;
               case 17:
                  jjAddStates(20, 21);
                  break;
               case 20:
                  jjAddStates(22, 23);
                  break;
               case 22:
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 143)
                     kind = 143;
                  jjCheckNAdd(23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(22, 23);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 36 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 4, 32, 34, 25, 31, 33, 7, 8, 11, 12, 14, 26, 27, 28, 
   26, 27, 28, 29, 17, 18, 20, 21, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, "\41\75", "\74\76", "\76\75", "\76", 
"\75", "\74\75", "\74", null, null, null, null, "\174\174", "\53", "\55", "\52", 
"\57", "\72\72", null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", "\56", "\50", "\51", "\54", null, "\75\75", "\133", "\135", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffffffffffffffffL, 0x7fcffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xeL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[36];
static private final int[] jjstateSet = new int[72];
static protected char curChar;
/** Constructor. */
public SPLParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SPLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 36; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
